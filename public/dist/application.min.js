"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0).hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),$state.go("authentication.signin",{},{notify:!1}).then(function(){$rootScope.$broadcast("$stateChangeSuccess","authentication.signin",{},toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$state.previous={state:fromState,params:fromParams,href:$state.href(fromState,fromParams)}})}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("chat"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("customers"),ApplicationConfiguration.registerModule("feedbacks"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("chat").run(["Menus",function(Menus){}]),angular.module("chat").config(["$stateProvider",function($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/views/chat.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("chat").controller("ChatController",["$scope","$location","Authentication","Socket",function($scope,$location,Authentication,Socket){$scope.messages=[],Authentication.user||$location.path("/"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){$scope.messages.unshift(message)}),$scope.sendMessage=function(){var message={text:this.messageText};Socket.emit("chatMessage",message),this.messageText=""},$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("not-found"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/views/404.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]);var App=angular.module("core");App.controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.myInterval=6e3,$scope.noWrapSlides=!1,$scope.slides=[{image:"modules/core/img/brand/insurance-arrow.jpg",text:"Insurance is a means of protection from financial loss"},{image:"modules/core/img/brand/Insurance policy.jpg",text:"Image 2"},{image:"modules/core/img/brand/Health Insurance policy.jpg",text:"Image 3"},{image:"modules/core/img/brand/insurance.jpg",text:"Image 4"},{image:"modules/core/img/brand/Home Insurance.jpg",text:"Image 5"},{image:"modules/core/img/brand/Insurance1.jpg",text:"Image 6"}]}]),App.controller("FeedCtrl",["$scope","FeedService",function($scope,Feed){$scope.feedSrc="http://rss.cnn.com/rss/cnn_topstories.rss",$scope.loadFeed=function(){Feed.parseFeed($scope.feedSrc).then(function(res){$scope.feeds=res.data.responseData.feed.entries})},$scope.loadFeed(),$scope.myInterval=3e3,$scope.noWrapSlides=!1}]),App.factory("FeedService",["$http",function($http){return{parseFeed:function(url){return $http.jsonp("//ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=20&callback=JSON_CALLBACK&q="+encodeURIComponent(url))}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?!0:options.isPublic,roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].roles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.link,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?this.menus[menuId].items[itemIndex].isPublic:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{isPublic:!1})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("customers").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Customers",state:"customers",type:"dropdown"}),Menus.addSubMenuItem("topbar","customers",{title:"Show Customers",state:"customers.list"})}]),angular.module("customers").config(["$stateProvider",function($stateProvider){$stateProvider.state("customers",{"abstract":!0,url:"/customers",template:"<ui-view/>",data:{roles:["user","admin"]}}).state("customers.list",{url:"",templateUrl:"modules/customers/views/list-customers.client.view.html"}).state("customers.create",{url:"/create",templateUrl:"modules/customers/views/create-customer.client.view.html"}).state("customers.view",{url:"/:customerId",templateUrl:"modules/customers/views/view-customer.client.view.html"}).state("customers.edit",{url:"/:customerId/edit",templateUrl:"modules/customers/views/edit-customer.client.view.html"})}]);var customerApp=angular.module("customers");customerApp.controller("CustomersController",["$scope","$stateParams","Authentication","Customers","$modal","$log","$filter","Notify",function($scope,$stateParams,Authentication,Customers,$modal,$log,$filter,Notify){this.authentication=Authentication,this.customers=Customers.query(),this.pager=function(){Customers.query(function(data){$scope.customerrecords=data,$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=8,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.customerrecords,{$:$scope.searchText}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()},$scope.buildPager()})},this.pager(),this.animationsEnabled=!0,this.modalCreate=function(size){var modalInstance=$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/customers/views/create-customer.client.view.html",controller:["$scope","$modalInstance",function($scope,$modalInstance){$scope.ok=function(isValid){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size});modalInstance.result.then(function(selectedItem){},function(){$log.info("Modal dismissed at: "+new Date)})},this.toggleAnimation=function(){$scope.animationsEnabled=!$scope.animationsEnabled},this.modalUpdate=function(size,selectedCustomer){var modalInstance=$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/customers/views/edit-customer.client.view.html",controller:["$scope","$modalInstance","customer",function($scope,$modalInstance,customer){$scope.customer=angular.copy(customer),$scope.ok=function(isValid){$modalInstance.close($scope.customer)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{customer:function(){return selectedCustomer}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},this.modalView=function(size,selectedCustomer){var modalInstance=$modal.open({animation:$scope.animationsEnabled,templateUrl:"modules/customers/views/customer-details.client.view.html",controller:["$scope","$modalInstance","customer",function($scope,$modalInstance,customer){$scope.customer=angular.copy(customer),$scope.ok=function(isValid){$modalInstance.close($scope.customer)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{customer:function(){return selectedCustomer}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},this.remove=function(customer){if(customer){customer.$remove();for(var i in this.customers)this.customers[i]===customer&&this.customers.splice(i,1),Notify.sendMsg("DeleteCustomer",{id:customer._id})}else this.customer.$remove(function(){})}}]),customerApp.controller("CustomersCreateController",["$scope","Customers","Notify",function($scope,Customers,Notify){this.create=function(){var customer=new Customers({firstName:this.firstName,middleName:this.middleName,lastName:this.lastName,gender:this.gender,dateOfBirth:this.dateOfBirth,phoneNumber:this.phoneNumber,emailId:this.emailId,maritalStatus:this.maritalStatus,language:this.language,address:this.address,postalCode:this.postalCode,policyNumber:this.policyNumber});customer.$save(function(response){Notify.sendMsg("NewCustomer",{id:response._id})},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.maxDate=new Date,$scope.minDate=new Date(1900,1,1),$scope.open=function($event){$scope.status.opened=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.format="dd-MMM-yyyy",$scope.status={opened:!1}}]),customerApp.controller("CustomersUpdateController",["$scope","Customers","Notify",function($scope,Customers,Notify){this.update=function(updatedCustomer){var customer=angular.copy(updatedCustomer);customer.$update(function(response){Notify.sendMsg("UpdateCustomer",{id:response._id}),console.log("Now calling the Update Method")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.maxDate=new Date,$scope.minDate=new Date(1900,1,1),$scope.open=function($event){$scope.status.opened=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.format="dd-MMM-yyyy",$scope.status={opened:!1}}]),customerApp.directive("customerList",["Customers","Notify",function(Customers,Notify){return{restrict:"E",transclude:"true",templateUrl:"modules/customers/views/view-customer.client.view.html",link:function(scope,element,attrs){Notify.getMsg("NewCustomer",function(event,data){scope.customersCtrl.pager()}),Notify.getMsg("UpdateCustomer",function(event,data){scope.customersCtrl.pager()}),Notify.getMsg("DeleteCustomer",function(event,data){scope.customersCtrl.pager()})}}}]),angular.module("customers").factory("Customers",["$resource",function($resource){return $resource("api/customers/:customerId",{customerId:"@_id"},{update:{method:"PUT"}})}]).factory("Notify",["$rootScope",function($rootScope){var notify={};return notify.sendMsg=function(msg,data){data=data||{},$rootScope.$emit(msg,data),console.log("Message Sent!")},notify.getMsg=function(msg,func,scope){var unbind=$rootScope.$on(msg,func);scope&&scope.$on("destroy",unbind)},notify}]),angular.module("feedbacks").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Feedbacks",state:"feedbacks",type:"dropdown"}),Menus.addSubMenuItem("topbar","feedbacks",{title:"Show Feedbacks",state:"feedbacks.list"}),Menus.addSubMenuItem("topbar","feedbacks",{title:"Add Feedbacks",state:"feedbacks.create"})}]),angular.module("feedbacks").config(["$stateProvider",function($stateProvider){$stateProvider.state("feedbacks",{"abstract":!0,url:"/feedbacks",template:"<ui-view/>",data:{roles:["user","admin"]}}).state("feedbacks.list",{url:"",templateUrl:"modules/feedbacks/views/list-feedbacks.client.view.html"}).state("feedbacks.create",{url:"/create",templateUrl:"modules/feedbacks/views/create-feedback.client.view.html"}).state("feedbacks.view",{url:"/:feedbackId",templateUrl:"modules/feedbacks/views/view-feedback.client.view.html"}).state("feedbacks.edit",{url:"/:feedbackId/edit",templateUrl:"modules/feedbacks/views/edit-feedback.client.view.html"})}]),angular.module("feedbacks").controller("FeedbacksController",["$scope","$stateParams","$location","Authentication","Feedbacks",function($scope,$stateParams,$location,Authentication,Feedbacks){$scope.authentication=Authentication,$scope.create=function(){var feedback=new Feedbacks({title:this.title,content:this.content});feedback.$save(function(response){$location.path("feedbacks/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(feedback){if(feedback){feedback.$remove();for(var i in $scope.feedbacks)$scope.feedbacks[i]===feedback&&$scope.feedbacks.splice(i,1)}else $scope.feedback.$remove(function(){$location.path("feedbacks")})},$scope.update=function(){var feedback=$scope.feedback;feedback.$update(function(){$location.path("feedbacks/"+feedback._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.feedbacks=Feedbacks.query()},$scope.findOne=function(){$scope.feedback=Feedbacks.get({feedbackId:$stateParams.feedbackId})}}]),angular.module("feedbacks").factory("Feedbacks",["$resource",function($resource){return $resource("api/feedbacks/:feedbackId",{feedbackId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/views/admin/user-list.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/views/admin/user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/views/admin/user-edit.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=10,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(){var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication",function($scope,$state,$http,$location,$window,Authentication){$scope.authentication=Authentication,$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.callOauthProvider=function(url){var redirect_to;$state.previous&&(redirect_to=$state.previous.href),$window.location.href=url+(redirect_to?"?redirect_to="+encodeURIComponent(redirect_to):"")}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);